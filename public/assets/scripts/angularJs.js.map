{"version":3,"sources":["app.js","carController.js","reservationController.js"],"names":[],"mappings":"AAAA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"angularJs.js","sourcesContent":["var app = angular.module('ForestCab', ['ui.bootstrap.datetimepicker'])\n        .constant('API_URL', 'http://localhost:8000/');","app.controller('carController', function($scope, $http, API_URL) {\n    $http.get(API_URL + \"cars\")\n            .success(function(response) {\n                $scope.cars = response;\n            });\n   \n});","app.controller('reservationController', function($scope, $http, API_URL) {\n    $http.get(API_URL + \"reservations\")\n            .success(function(response) {\n                 $scope.reservations = response;\n                for(var i=0;i<$scope.reservations.length;i++) {\n                  $scope.reservations[i].range = angular.fromJson( $scope.reservations[i].range);\n                  $scope.reservations[i].user = angular.fromJson( $scope.reservations[i].user);\n                  $scope.reservations[i].driver = angular.fromJson( $scope.reservations[i].driver);\n                }\n               \n            });\n    \n    //show modal form\n    $scope.toggle = function(modalstate, id) {\n        $scope.reservation = null;\n        $scope.modalstate = modalstate;\n\n        switch (modalstate) {\n            case 'add':\n                $scope.form_title = \"Ajout Nouvelle Resrvation\";\n                $http.get(API_URL + 'reservations/create')\n                        .success(function(response) {\n                            console.log(response);\n                            $scope.ranges = response.ranges;\n\n                            $scope.users = response.users;\n\n                            $scope.drivers = response.drivers;\n                        });\n                break;\n            case 'edit':\n                $scope.form_title = \"DÃ©tails Reservation\";\n                $scope.id = id;\n                $http.get(API_URL + 'reservations/' + id +'/edit')\n                        .success(function(response) {\n                            console.log(response);\n                            response.reservation.range = angular.fromJson( response.reservation.range);\n                            response.reservation.user = angular.fromJson( response.reservation.user);\n                            response.reservation.driver = angular.fromJson( response.reservation.driver);\n                            response.from_adr =  angular.fromJson( response.reservation.from_adr);\n                            response.to_adr =  angular.fromJson( response.reservation.to_adr);\n                            $scope.reservation = response.reservation;\n\n                            $scope.ranges = response.ranges;\n\n                            $scope.users = response.users;\n\n                            $scope.drivers = response.drivers;\n\n\n                        });\n                break;\n            default:\n                break;\n        }\n        console.log(id);\n        $('#myModal').modal('show');\n    }\n\n    //save new record / update existing record\n    $scope.save = function(modalstate, id) {\n        var url = API_URL + \"reservations\";\n        $scope.ranges = $scope.ranges.objectId;\n\n        $scope.users = $scope.users.objectId;\n        $scope.drivers = $scope.drivers.objectId;\n\n        if (modalstate === 'edit'){\n            url += \"/\" + id;\n        }\n        else {\n            url+=\"/store\";\n        }\n        \n        $http({\n            method: 'POST',\n            url: url,\n            data: $.param($scope.reservation),\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n        }).success(function(response) {\n            console.log(response);\n            //location.reload();\n        }).error(function(response) {\n            console.log(response);\n            alert('This is embarassing. An error has occured. Please check the log for details');\n        });\n    }\n\n    //delete record\n    $scope.confirmDelete = function(id) {\n        var isConfirmDelete = confirm('Are you sure you want this record?');\n        if (isConfirmDelete) {\n            $http({\n                method: 'DELETE',\n                url: API_URL + 'reservations/' + id\n            }).\n                    success(function(data) {\n                        console.log(data);\n                        location.reload();\n                    }).\n                    error(function(data) {\n                        console.log(data);\n                        alert('Unable to delete');\n                    });\n        } else {\n            return false;\n        }\n    }\n\n\n        /* Bindable functions\n     -----------------------------------------------*/\n    $scope.endDateBeforeRender = endDateBeforeRender\n    $scope.endDateOnSetTime = endDateOnSetTime\n    $scope.startDateBeforeRender = startDateBeforeRender\n    $scope.startDateOnSetTime = startDateOnSetTime\n\n    function startDateOnSetTime () {\n      $scope.$broadcast('start-date-changed');\n    }\n\n    function endDateOnSetTime () {\n      $scope.$broadcast('end-date-changed');\n    }\n\n    function startDateBeforeRender ($dates) {\n      if ($scope.dateRangeEnd) {\n        var activeDate = moment($scope.dateRangeEnd);\n\n        $dates.filter(function (date) {\n          return date.localDateValue() >= activeDate.valueOf()\n        }).forEach(function (date) {\n          date.selectable = false;\n        })\n      }\n    }\n\n    function endDateBeforeRender ($view, $dates) {\n      if ($scope.dateRangeStart) {\n        var activeDate = moment($scope.dateRangeStart).subtract(1, $view).add(1, 'minute');\n\n        $dates.filter(function (date) {\n          return date.localDateValue() <= activeDate.valueOf()\n        }).forEach(function (date) {\n          date.selectable = false;\n        })\n      }\n    }\n});"]}